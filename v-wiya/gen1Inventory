#Connect to storage account
#input: tenantid, credential
#output: context 

function ConnectGen1{
    [cmdletBinding()]
    param([string] $tenantid, [System.Management.Automation.PSCredential] $credential)

    try {
        Connect-AzAccount -ServicePrincipal -Credential $credential -Tenant $tenantid;
    }
    catch{
        throw $error[0].Exception;
    }
}

#get gen1 filelist
#input: filepath, account name, cutoff time
#output: filelist
function GetGen1FilesToSql {
    [cmdletBinding()]
    param([string] $FilePath, [string] $AccountName, [string] $cutofftime, [int]$batchid) 
    if ($cutofftime -eq '')
    {
    $cutoffint=0;
    }
    else{
    $cutoffint=[int64]((get-date $cutofftime)-(get-date "1/1/1970")).TotalMilliseconds;
    }

    $connectionstring = Get-AzKeyVaultSecret -VaultName $vaultName -Secretname "SqlConnectionString"; 

    $sqlConn=ConnectToSql $connectionstring.SecretValueText;

    if ($sqlConn.State -ne 'Open')
    {
    $sqlConn.Open();

    }
    
    [int]$batchid=1;
    if ($FilePath -ne '' -and $AccountName -ne ''){
        #$gen1FileList=New-Object System.Collections.ArrayList;
        $ChildItems= Get-AzDataLakeStoreItem -AccountName $AccountName -Path $FilePath;
        if ($ChildItems.Type -eq "DIRECTORY"){
            WriteGen1FolderToSql $sqlConn $ChildItem $batchid;
            $ChildItems = Get-AzDataLakeStoreChildItem -AccountName $AccountName -Path $FilePath;
        }
        #$ChildItems = Get-AzDataLakeStoreChildItem -AccountName $AccountName -Path $FilePath;
        foreach ($ChildItem in $ChildItems) {
            switch ($ChildItem.Type) {
                "FILE" {
                if ($ChildItem.modificationtime -gt $cutoffint){

                    $acl=Get-AzDataLakeStoreItemAclEntry -AccountName $AccountName -Path $ChildItem.path;


                    if ($sqlConn.State -ne 'Open')
                    {
                    $sqlConn.Open();
                    }
                    WriteGen1FileToSql $sqlConn $ChildItem;
                    [int]$fileid=GetFileId $sqlConn;
                    Start-Job -ScriptBlock { 
                    WriteGen1AclToSql $sqlConn $ChildItem $fileid;
                    }

                    }
                }
                "DIRECTORY" {
                    #WriteGen1FolderToSql $sqlConn $ChildItem 1;
                    GetGen1FilesToSql $ChildItem.path $AccountName $cutofftime;
                }
            }
        }       
    }
    else{
        throw 'cannot find filepath or account';
    }    
}


function ConnectToSql
{
    param([string] $connectionstring)
    $sqlConn = New-Object System.Data.SqlClient.SqlConnection;
    $sqlConn.ConnectionString = $connectionstring;
    return $sqlConn;
}

function WriteGen1FileToSql
{
    param([System.Data.SqlClient.SqlConnection] $sqlConn, [Microsoft.Azure.Commands.DataLakeStore.Models.DataLakeStoreItem] $Files)
    $cmd = New-Object System.Data.SqlClient.SqlCommand;
    $cmd.connection = $sqlConn;
    $time=get-date;
    $cmd.CommandText = "INSERT INTO [Inventory].[Gen1File] (filename, filepath, blocksize, filesizeinbytes, [filemodificationtime], fileowner,[filelastwritetime], RowInsertedDate) VALUES('{0}','{1}','{2}','{3}','{4}','{5}','{6}', '{7}')" -f $files.name, $files.path, $files.blocksize, $files.length, $files.modificationtime.datetime, $files.owner, $files.lastwritetime.datetime ,$time; 
    $cmd.ExecuteNonQuery();
}

function GetFileId{
    param([System.Data.SqlClient.SqlConnection] $sqlConn)
    $query = "Select max(fileid) from [Inventory].[Gen1File]";
    $cmd=New-Object System.Data.SqlClient.SqlCommand($query,$sqlConn);
    [int]$fileid=$cmd.ExecuteScalar();
    return $fileid;
}

function WriteGen1AclToSql
{
    param([System.Data.SqlClient.SqlConnection] $sqlConn, [Microsoft.Azure.Commands.DataLakeStore.Models.DataLakeStoreItem] $files, [int] $fileid)

    $acl=Get-AzDataLakeStoreItemAclEntry -AccountName $AccountName -Path $ChildItem.path;
    $cmd = New-Object System.Data.SqlClient.SqlCommand;
    $cmd.connection = $sqlConn;
    $time=get-date;
    foreach($aclitem in $acl)
    {    
        $cmd.CommandText = "INSERT INTO [Inventory].[Gen1ACL] (fileid, filename, filepath, AccessScope, AccessType, AccessObjectId, FilePermission, RowInsertedDate) VALUES('{0}','{1}','{2}','{3}','{4}', '{5}', '{6}', '{7}')" -f $fileid, $files.name, $files.path, $aclitem.scope, $aclitem.type, $aclitem.id, $aclitem.permission, $time;
        $cmd.ExecuteNonQuery();
    }
}

function WriteGen1FolderToSql{
    param([System.Data.SqlClient.SqlConnection] $sqlConn, [Microsoft.Azure.Commands.DataLakeStore.Models.DataLakeStoreItem] $files, [int]$batchid)
    $cmd = New-Object System.Data.SqlClient.SqlCommand;
    $cmd.connection = $sqlConn;
    $time=get-date;
    $cmd.CommandText = "INSERT INTO [Inventory].[Gen1Folder] (batchid, foldername, folderpath, FolderSizeInBytes,RowInsertedDate) VALUES('{0}','{1}','{2}','{3}','{4}')" -f $batchid, $files.name, $files.path, $files.length,$time; 
    $cmd.ExecuteNonQuery();
}

#get gen1 filelist
#input: filelist
#output: output location
function ExportCSVFile{
    param([System.Collections.ICollection] $Files, [string] $outputlocation)  
    $Files | Export-Csv -Path $outputlocation
}



#get gen1 filelist
#input: account name, filepath, outputlocation
#output: none
function UploadFileToGen1{
    param([string] $Account, [string] $FilePath, [string] $outputlocation)  
    Import-AzDataLakeStoreItem -AccountName $Account `
        -Path $FilePath `
        -Destination $outputlocation
}


